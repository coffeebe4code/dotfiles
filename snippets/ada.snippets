# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet withu "with and use" 
with ${1:name}; use ${1:name};
${0}
endsnippet

snippet with "with"
with ${1:name};
${0}
endsnippet

snippet pro0 "procedure 0 arguments"
procedure ${1:name} is
	${2}
begin
	${0}
end ${1};
endsnippet

snippet pro1 "procedure w many arguments"
procedure ${1:name} (${2:args}) is
	${3}
begin
	${0}
end ${1};
endsnippet

snippet pack "package w/o body"
package ${1:name} is
	${0}
end ${1};
endsnippet

snippet packb "package w body"
package body ${1:name} is
	${0}
end ${1};
endsnippet

snippet func0 "function w 0 arguments"
function ${1:name} return ${2:returns} is
	${3}
begin
	${0}
end ${1};
endsnippet

snippet func1 "function w many arguments"
function ${1:name} (${2:args}) return ${3:returns} is
	${4}
begin
	${0}
end ${1};
endsnippet

snippet rec "record type"
type ${1:name} is record
	${0}
end record;
endsnippet

snippet recd "record type discriminant"
type ${1:name} (${2:descriminant}) is record
	${0}
end record;
endsnippet

snippet if "if end if"
if ${1:thing} then
	${0}
end if;
endsnippet

snippet ife "if else end if"
if ${1:thing} then
	${2}
else
	${0}
end if;
endsnippet

snippet ifel "if else if"
if ${1:thing} then
	${2}
elsif
	${3}
else
	${0}
end if;
endsnippet
